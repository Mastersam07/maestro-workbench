{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "properties": {
        "addMedia": {
            "type": "array",
            "items": {
                "type": "string",
                "pattern": "^\\.\/assets\/.*\\.(png|jpeg|jpg|gif|mp4)$"
            },
            "minItems": 1,
            "description": "List of media file paths to add to the device's gallery. Supported mime types are PNG, JPEG, JPG, GIF, and MP4."
        },
        "assertVisible": {
            "oneOf": [
                {
                    "type": "string",
                    "description": "The text to assert visibility for a single view with specific text."
                },
                {
                    "type": "object",
                    "properties": {
                        "text": {
                            "type": "string",
                            "description": "Text in a view to check visibility."
                        },
                        "id": {
                            "type": "string",
                            "description": "ID of a view to check visibility."
                        },
                        "enabled": {
                            "type": "boolean",
                            "description": "True if the view is enabled."
                        },
                        "checked": {
                            "type": "boolean",
                            "description": "True if the view is checked."
                        },
                        "focused": {
                            "type": "boolean",
                            "description": "True if the view has keyboard focus."
                        },
                        "selected": {
                            "type": "boolean",
                            "description": "True if the view is selected."
                        }
                    },
                    "additionalProperties": false,
                    "description": "Selector object to specify the conditions for visibility."
                }
            ],
            "description": "Command to assert whether an element is visible. Can take a string for text or an object with selector parameters."
        },
        "assertNotVisible": {
            "oneOf": [
                {
                    "type": "string",
                    "description": "The text to assert non-visibility for a single view with specific text."
                },
                {
                    "type": "object",
                    "properties": {
                        "text": {
                            "type": "string",
                            "description": "Text in a view to check non-visibility."
                        },
                        "id": {
                            "type": "string",
                            "description": "ID of a view to check non-visibility."
                        },
                        "enabled": {
                            "type": "boolean",
                            "description": "True if the view is enabled."
                        },
                        "checked": {
                            "type": "boolean",
                            "description": "True if the view is checked."
                        },
                        "focused": {
                            "type": "boolean",
                            "description": "True if the view has keyboard focus."
                        },
                        "selected": {
                            "type": "boolean",
                            "description": "True if the view is selected."
                        }
                    },
                    "additionalProperties": false,
                    "description": "Selector object to specify the conditions for non-visibility."
                }
            ],
            "description": "Command to assert whether an element is not visible. Can take a string for text or an object with selector parameters."
        },
        "assertTrue": {
            "oneOf": [
                {
                    "type": "string",
                    "description": "A JavaScript expression to assert its truthiness."
                },
                {
                    "type": "object",
                    "properties": {
                        "condition": {
                            "type": "string",
                            "description": "A JavaScript expression to assert its truthiness."
                        },
                        "label": {
                            "type": "string",
                            "description": "A label to describe the assertion, typically for debugging or failure messages."
                        }
                    },
                    "required": [
                        "condition"
                    ],
                    "additionalProperties": false,
                    "description": "An object defining a JavaScript expression to assert and an optional label."
                }
            ],
            "description": "Command to assert whether a given value is true, non-empty, or truthy."
        },
        "back": {
            "type": "null",
            "description": "Command to navigate the user to the previous screen (Android-only)."
        },
        "clearKeychain": {
            "type": "null",
            "description": "Command to clear the entire iOS keychain (not applicable on Android)."
        },
        "clearState": {
            "oneOf": [
                {
                    "type": "null",
                    "description": "Clears the state of the current app."
                },
                {
                    "type": "string",
                    "description": "Clears the state of an arbitrary app specified by its ID."
                }
            ],
            "description": "Command to clear the application state, removing all app-related data (e.g., shared preferences, databases, accounts, etc.)."
        },
        "copyTextFrom": {
            "type": "object",
            "properties": {
                "text": {
                    "type": "string",
                    "description": "Finds an element with text or accessibility text matching the given regular expression."
                },
                "id": {
                    "type": "string",
                    "description": "Finds an element with an accessibility identifier matching the given regular expression."
                },
                "index": {
                    "type": "integer",
                    "minimum": 0,
                    "description": "Zero-based index of the view to select among those that match all other criteria."
                },
                "point": {
                    "type": "string",
                    "pattern": "^\\d+%, \\d+%$|^\\d+, \\d+$",
                    "description": "Relative or exact position on the screen."
                },
                "width": {
                    "type": "integer",
                    "description": "Finds an element of a given width."
                },
                "height": {
                    "type": "integer",
                    "description": "Finds an element of a given height."
                },
                "tolerance": {
                    "type": "integer",
                    "description": "Tolerance to apply when comparing width and height."
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Searches for a view with a given 'enabled' state."
                },
                "checked": {
                    "type": "boolean",
                    "description": "Searches for a view with a given 'checked' state."
                },
                "focused": {
                    "type": "boolean",
                    "description": "Searches for a view with a given 'focused' state."
                },
                "selected": {
                    "type": "boolean",
                    "description": "Searches for a view with a given 'selected' state."
                }
            },
            "additionalProperties": false,
            "description": "Command to copy text from an element and save it in memory for use in subsequent actions."
        },
        "evalScript": {
            "type": "string",
            "description": "Command to execute a JavaScript expression directly within the Maestro flow. Typically used for simple computations or operations."
        },
        "jsEngine": {
            "type": "string",
            "enum": [
                "rhino",
                "graaljs"
            ],
            "description": "Specifies the JavaScript engine to use for script evaluation. Defaults to 'rhino' but supports 'graaljs' for ECMAScript 2022 compliance."
        }
    },
    "additionalProperties": false
}